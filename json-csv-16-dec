import streamlit as st
import re
import json

def analyze_sql(sql_query):
    # Regular expression patterns for extracting source tables, columns, and filters
    table_pattern = re.compile(r'\bFROM\s+(\w+(\s+\w+)?)(\s*,\s*\w+(\s+\w+)?)?\b', re.IGNORECASE)
    column_pattern = re.compile(r'\bSELECT\s+([\w.,\s]+)\b', re.IGNORECASE)
    filter_pattern = re.compile(r'\bWHERE\s+(.+)\b', re.IGNORECASE)

    # Extract source tables, columns, and filters
    source_tables = table_pattern.findall(sql_query)
    source_columns = column_pattern.findall(sql_query)
    source_filters = filter_pattern.findall(sql_query)

    # Flatten lists and remove duplicates
    source_tables = list(set(item.strip() for sublist in source_tables for item in sublist if item))
    source_columns = list(set(item.strip() for sublist in source_columns for item in sublist.split(',')))
    source_filters = list(set(item.strip() for sublist in source_filters for item in sublist.split('AND')))

    # Create JSON output
    output_json = {
        "source_tables": source_tables,
        "source_columns": source_columns,
        "source_filters": source_filters
    }

    return json.dumps(output_json, indent=2)

def main():
    st.title("SQL Query Analyzer")

    # Get SQL query from user
    code_input = st.text_area("Enter SQL Query:")
    
    # Analyze button
    if st.button("Analyze SQL"):
        if code_input:
            # Analyze the SQL query
            result = analyze_sql(code_input)

            # Display the result
            st.header("Analysis Result (JSON):")
            st.json(result)
        else:
            st.warning("Please enter a SQL query.")

if __name__ == "__main__":
    main()
======================================================

